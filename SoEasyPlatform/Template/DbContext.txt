using @Model.ClassNamespace;
using SqlSugar;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using @(Model.SolutionName).Data.Config;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace @(Model.SolutionName).BusinessCore
{
    public class DbContext
    {
        public DbContext()
        {
            Db = new SqlSugarClient(new ConnectionConfig()
            {
                ConnectionString = GlobalsConfig.Configuration[ConfigurationKeys.Sql_Connection],
                DbType = DbType.@Model.DbType,
                InitKeyType = InitKeyType.Attribute,//从特性读取主键和自增列信息
                IsAutoCloseConnection = true,//开启自动释放模式和EF原理一样我就不多解释了
                SlaveConnectionConfigs = GetSonConnection(),//读写分离
            });

            //调式代码 用来打印SQL 
            Db.Aop.OnLogExecuting = (sql, pars) =>
            {
                //Console.WriteLine(sql + "\r\n" +
                //    Db.Utilities.SerializeObject(pars.ToDictionary(it => it.ParameterName, it => it.Value)));
                //Console.WriteLine();
            };
        }

        //注意：不能写成静态的
        public SqlSugarClient Db;//用来处理事务多表查询和复杂的操作

        /// <summary>
        /// 获取数据库DB
        /// </summary>
        /// <returns></returns>
        public virtual SqlSugarClient GetInstance()
        {
            return Db;
        }

        protected List<SlaveConnectionConfig> GetSonConnection()
        {
            return JsonConvert.DeserializeObject<List<SlaveConnectionConfig>>(GlobalsConfig.Configuration[ConfigurationKeys.Sql_ConnectionSon]); ;
        }
    }

    public class DbContext<T> where T : class, new()
    {
        public DbContext()
        {
            Db = new SqlSugarClient(new ConnectionConfig()
            {
                ConnectionString = GlobalsConfig.Configuration[ConfigurationKeys.Sql_Connection],
                DbType = DbType.@Model.DbType,
                InitKeyType = InitKeyType.Attribute,//从特性读取主键和自增列信息
                IsAutoCloseConnection = true,//开启自动释放模式和EF原理一样我就不多解释了

            });
            //调式代码 用来打印SQL 
            Db.Aop.OnLogExecuting = (sql, pars) =>
            {
                Console.WriteLine(sql + "\r\n" +
                    Db.Utilities.SerializeObject(pars.ToDictionary(it => it.ParameterName, it => it.Value)));
                Console.WriteLine();
            };

        }
        //注意：不能写成静态的
        public SqlSugarClient Db;//用来处理事务多表查询和复杂的操作
	    public SimpleClient<T> CurrentDb { get { return new SimpleClient<T>(Db); } }//用来操作当前表的数据

        @foreach(var item in @Model.Tables)
        {
      @: public SimpleClient<@item> @(item)Db { get { return new SimpleClient<@item>(Db); } }//用来处理@(item)表的常用操作
        }
    }
}

