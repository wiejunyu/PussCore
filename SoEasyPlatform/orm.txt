
/*********查询*********/

var data1 = @(Model.Name)Db.GetById(1);//根据ID查询
var data2 = @(Model.Name)Db.GetList();//查询所有
var data3 = @(Model.Name)Db.GetList(it => 1 == 1);  //根据条件查询  
var data4 = @(Model.Name)Db.GetSingle(it => 1 == 1);//根据条件查询一条,如果超过一条会报错
    
var p = new PageModel() { PageIndex = 1, PageSize = 2 };// 分页查询
var data5 = @(Model.Name)Db.GetPageList(it => 1 == 1, p);
Console.Write(p.PageCount);//返回总数

var data6 = @(Model.Name)Db.GetPageList(it => 1 == 1, p, it => SqlFunc.GetRandom(), OrderByType.Asc);// 分页查询加排序
Console.Write(p.PageCount);//返回总数

List<IConditionalModel> conModels = new List<IConditionalModel>(); //组装条件查询作为条件实现 分页查询加排序
conModels.Add(new ConditionalModel() { FieldName = typeof(@Model.Name).GetProperties()[0].Name, ConditionalType = ConditionalType.Equal, FieldValue = "1" });//id=1
var data7 = @(Model.Name)Db.GetPageList(conModels, p, it => SqlFunc.GetRandom(), OrderByType.Asc);
var data8 = UserDb.IsAny(it => 1 == 1);//判断是否存在

@(Model.Name)Db.AsQueryable().Where(x => 1 == 1).ToList();//支持了转换成queryable,我们可以用queryable实现复杂功能

//我要用事务
var result = Db.Ado.UseTran(() =>
    {
    //写事务代码
});
if (result.IsSuccess)
{
    //事务成功
}

//多表查询地址 http://www.codeisbug.com/Doc/8/1124



/*********插入*********/
var insertData = new @(Model.Name)() { };//测试参数
var insertArray = new @(Model.Name)[] { insertData };
@(Model.Name)Db.Insert(insertData);//插入
@(Model.Name)Db.InsertRange(insertArray);//批量插入
var id = @(Model.Name)Db.InsertReturnIdentity(insertData);//插入返回自增列
@(Model.Name)Db.AsInsertable(insertData).ExecuteCommand();//我们可以转成 Insertable实现复杂插入



/*********更新*********/
var updateData = new @(Model.Name)() {  };//测试参数
var updateArray = new @(Model.Name)[] { updateData };//测试参数
@(Model.Name)Db.Update(updateData);//根据实体更新
@(Model.Name)Db.UpdateRange(updateArray);//批量更新
//@(Model.Name)Db.Update(it => new @(Model.Name)() { Name = "a", CreateTime = DateTime.Now }, it => it.id==1);// 只更新Name列和CreateTime列，其它列不更新，条件id=1
@(Model.Name)Db.AsUpdateable(updateData).ExecuteCommand();



/*********删除*********/
var deldata = new @(Model.Name)() {  };//测试参数
@(Model.Name)Db.Delete(deldata);//根据实体删除
@(Model.Name)Db.DeleteById(1);//根据主键删除
@(Model.Name)Db.DeleteById(new int[] { 1,2});//根据主键数组删除
@(Model.Name)Db.Delete(it=>1==2);//根据条件删除
@(Model.Name)Db.AsDeleteable().Where(it=>1==2).ExecuteCommand();//转成Deleteable实现复杂的操作